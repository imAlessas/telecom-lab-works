clc, clear, format compact

% Task 1
T = 1; % symbol duration [seconds]
f0 = 10; % carrier frequecy [Hz]

N = 15; % number of symbols
sB = randi(2, 1, N) - 1; % random sequence of 1 and 0

SNR = 15; % Db



% plot binary datas
figure(3);
subplot(311), stairs(0 : T : N * T, [sB sB(end)]), grid on
ylim([-0.1 1.1]), xlabel("Time [s]"), ylabel("Binary data")


% Calcilate f1 and f2 frequency
k = 12;
delta_f = k /(2 * T);
f1 = f0 - delta_f/2;
f2 = f0 + delta_f/2;


% plot BFSK signal wihout errors
dt =  T / 200;
t = 0 : dt : T - dt;
s1 = sin (2 * pi * f1 * t);
s2 = sin (2 * pi * f2 * t);


% Generatr BFSK
sBASK1 = kron(sB, s1);
sBASK2 = kron(~sB, s2);
sBFSK = sBASK1 + sBASK2; 

tBFSK = 0 : dt : N * T - dt;
subplot(312), plot(tBFSK, sBFSK), grid on
ylim([-1.1 1.1]), xlabel("Time [s]"), ylabel("Binary data")


% Generate noise
Eb = sum(s1.^2);
EbN0 = 10^(SNR / 10);
N0 = Eb / EbN0;
sigma = sqrt(N0 / 2);
sNoise = sigma * randn(1, N * 200);



% Add noise
sBFSKN = sBFSK + sNoise;
subplot(313), plot(tBFSK, sBFSKN), grid on
ylim([-1.1 1.1]), xlabel("Time [s]"), ylabel("BFSK signal with noise");


%% sium


clc, clear, format compact


% Task 1
T = 1; % symbol duration [seconds]
F0 = 10; % carrier frequecy [Hz]
N = 15; % number of symbols
binary_sequence = randi(2, 1, N) - 1; % random sequence of 1 and 0
SNR = 15; % Db

% plot binary data
f = figure(1);
f.Position = [450, 100, 700, 600];

subplot(311), stairs(0 : T : N * T, [binary_sequence binary_sequence(end)]), grid on; % plot
xlabel("Time [s]"), ylabel("Binary data"); % labels
ylim([-0.1 1.1]); % limits



% Task 2
% calculate f1 and f2 frequencies
k = 12;
delta_f = k /(2 * T); 
f1 = f0 - delta_f/2; % first frequency
f2 = f0 + delta_f/2; % second frequency

% create carrier signal
delta_t =  T / 200; % step duration
t = 0 : delta_t : T - delta_t; % time intervals
s1 = sin (2 * pi * f1 * t); % first carrier signal
s2 = sin (2 * pi * f2 * t); % second carrier signal


% Task 3
% Generate BFSK signal with no noise
BASK_signal_1 = kron(binary_sequence, s1); % Kroneker multiplication
BASK_signal_2 = kron(binary_sequence, s1); % Kroneker multiplication
BFSK_signal = BASK_signal_1 + BASK_signal_2; % add together the two BASK signals
BFSK_intervals = 0 : delta_t : N * T - delta_t; % time intervals for BASK 

subplot(312), plot(BFSK_intervals, BASK_signal), grid on; % plot
xlabel("Time [s]"), ylabel("BASK signal"); % labels
ylim([-1.1 1.1]); % limits


% Task 4
% Generate AGWN
EbN0 = 10^(SNR / 10); % inversed SNR formula
Eb = sum(s0.^2); % energy of carrier signal
N0 = Eb / EbN0; % noise power spectral density
sigma = sqrt(N0 / 2); % sigma^2 = N0/2
noise = sigma * randn(1, N * 200); % get gaussian noise using randn()


% Add noise to the BASK signal
BASK_with_noise = BASK_signal + noise;
subplot(313), plot(BFSK_intervals, BASK_with_noise), grid on; % plot
xlabel("Time [s]"), ylabel("BASK signal with noise"); % labels
ylim([-1.1 1.1]); % limits

